# Dotfiles functions
export PATH=$PATH:/home/markmulder/dotfiles/zsh/functions

# Rust
export PATH=$PATH:$HOME/.cargo/bin

# Go
export GOPATH=$HOME/sources/go
export PATH=$PATH:$GOPATH/bin

# Flutter (linux only)
export PATH=$PATH:/opt/flutter/bin

export MANPATH="/usr/local/man:/usr/local/mysql/man:/usr/local/git/man:$MANPATH"

export LANGUAGE=en_US.UTF-8
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

fpath=(~/.zsh/functions $fpath)

autoload -U ~/.zsh/functions/*(:t)

HISTFILE=~/.zsh_history
HISTSIZE=1000
SAVEHIST=1000

setopt NO_BG_NICE # don't nice background tasks
setopt NO_HUP
setopt NO_LIST_BEEP
setopt LOCAL_OPTIONS # allow functions to have local options
setopt LOCAL_TRAPS # allow functions to have local traps
setopt HIST_VERIFY
setopt EXTENDED_HISTORY # add timestamps to history
setopt PROMPT_SUBST
setopt CORRECT
setopt COMPLETE_IN_WORD

setopt APPEND_HISTORY # adds history
setopt HIST_IGNORE_ALL_DUPS  # don't record dupes in history
setopt HIST_REDUCE_BLANKS

zle -N newtab

bindkey '^[^[[D' backward-word
bindkey '^[^[[C' forward-word
bindkey '^[[5D' beginning-of-line
bindkey '^[[5C' end-of-line
bindkey '^[[3~' delete-char
bindkey '^[^N' newtab
bindkey '^?' backward-delete-char

# enable shift tab
bindkey '^[[Z' reverse-menu-complete

autoload colors zsh/terminfo
if [[ "$terminfo[colors]" -ge 8 ]]; then
  colors
fi
for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
  eval PR_$color='%{$terminfo[bold]$fg[${(L)color}]%}'
  eval PR_LIGHT_$color='%{$fg[${(L)color}]%}'
  (( count = $count + 1 ))
done

export RUBYLIB="lib:test:$RUBYLIB"

export PATH="$HOME/.rbenv/bin:$PATH"
eval "$(rbenv init -)"

# Prompt setup
autoload -U colors
colors

local path_string="%{$fg[yellow]%}%~"
local prompt_string="Â»"

# Make prompt_string red if the previous command failed.
local return_status="%(?:%{$fg[blue]%}$prompt_string:%{$fg[red]%}$prompt_string)"

function parse_git_branch() {
  git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
}

git_branch_prompt() {
  # Only use space for branch when we are in a git repo
  local inside_git_repo="$(git rev-parse --is-inside-work-tree 2>/dev/null)"
  if [ $inside_git_repo ]; then
    echo " %{$fg[magenta]%}$(parse_git_branch) "
  else
    echo " "
  fi
}

parse_remote_state() {
	remote_state=$(git status -sb 2> /dev/null | grep -oh "\[.*\]")
	if [[ "$remote_state" != "" ]]; then

    # starting bracket
    local out="%{$fg[yellow]%}[%{$reset_color%}"

		if [[ "$remote_state" == *ahead* ]] && [[ "$remote_state" == *behind* ]]; then
			behind_num=$(echo "$remote_state" | grep -oh "behind [0-9]*" | grep -oh "[0-9]*$")
			ahead_num=$(echo "$remote_state" | grep -oh "ahead [0-9]*" | grep -oh "[0-9]*$")
      out="$out%{$fg[red]%}$behind_num%[$reset_color%},%{$fg[green]%}$ahead_num%{$reset_color%}"
		elif [[ "$remote_state" == *ahead* ]]; then
			ahead_num=$(echo "$remote_state" | grep -oh "ahead [0-9]*" | grep -oh "[0-9]*$")
      out="$out%{$fg[green]%}$ahead_num%{$reset_color%}"
		elif [[ "$remote_state" == *behind* ]]; then
			behind_num=$(echo "$remote_state" | grep -oh "behind [0-9]*" | grep -oh "[0-9]*$")
      out="$out%{$fg[red]%}$behind_num%{$reset_color%}"
		fi

    # ending bracket
    out="$out%{$fg[yellow]%}]%{$reset_color%}"
    echo "$out "
	fi
}

PROMPT='${path_string}$(git_branch_prompt)$(parse_remote_state)${return_status} %{$reset_color%}'

autoload -U url-quote-magic
zle -N self-insert url-quote-magic

export CLICOLOR=1
export LSCOLORS=GxFxCxDxBxegedabagaced

export ANDROID_HOME=/usr/local/opt/android-sdk

export VISUAL="vim"

eval "$(direnv hook zsh)"

# PSQL binaries were unavailable for some reason after updating homebrew
export PATH=$PATH:/usr/local/Cellar/postgresql94/9.4.9_1/bin

set -o emacs

# GPG Signing of commits
export GPG_TTY=$(tty)

# load ssh commands to turn tmux pane that SSHs red
source ~/dotfiles/zsh/functions/ssh_with_color.sh

# Binstubs
export PATH="./bin:$PATH"
